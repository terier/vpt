#!/usr/bin/env node

const fs = require('fs');

const files = [
    'mitos.bvp',
    'fibers.bvp',
    'shards.bvp',
    'manix.bvp',
];

const orientations = new Array(10).fill(0).map(_ => [
    Math.acos(Math.random() * 2 - 1),
    Math.random() * Math.PI * 2,
    0,
]);

const renderers = [
    {
        type: 'mip',
        settings: {
            steps: 256,
        },
    },
    {
        type: 'iso',
        settings: {
            steps: 256,
            isovalue: 0.5,
            light: [2, 3, -2],
        },
    },
    {
        type: 'eam',
        settings: {
            extinction: 100,
            slices: 1024,
        },
    },
    {
        type: 'dos',
        settings: {
            extinction: 100,
            slices: 1024,
            steps: 1024,
            aperture: 50,
        },
    },
    {
        type: 'mcm',
        settings: {
            extinction: 100,
            steps: 64,
        },
    },
];

const tonemappers = [
    {
        type: 'artistic',
        settings: {
            gamma: 2.2,
        },
    },
];

const cameras = [
    {
        near: 1,
        far: 5,
        zoomFactor: 0.00025,
    },
    {
        near: 1,
        far: 5,
        zoomFactor: 0.0004,
    },
];

function hex2rgb(str) {
    return [
        parseInt(str.substring(1, 3), 16) / 255,
        parseInt(str.substring(3, 5), 16) / 255,
        parseInt(str.substring(5, 7), 16) / 255,
    ];
}

const groups = [
    {
        color: [...hex2rgb('#38e4ff'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 0.2,
        }],
    },
    {
        color: [...hex2rgb('#53de31'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 0.4,
        }],
    },
    {
        color: [...hex2rgb('#f5cc43'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 0.6,
        }],
    },
    {
        color: [...hex2rgb('#de4f31'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 0.8,
        }],
    },
    {
        color: [...hex2rgb('#b542fc'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 1,
        }],
    },
];

const transferFunction = JSON.parse(fs.readFileSync(process.argv[2], 'utf8'));

function cartesian(...lists) {
    if (lists.length === 0) {
        return [];
    } else if (lists.length === 1) {
        return lists[0];
    } else if (lists.length === 2) {
        return lists[0].flatMap(x => lists[1].map(y => [x, y]));
    } else {
        const recursive = cartesian(...lists.slice(1));
        return lists[0].flatMap(x => recursive.map(y => [x, ...y]));
    }
}

const tests = cartesian(
    files,
    orientations,
    renderers,
    tonemappers,
).map(([
    file,
    orientation,
    renderer,
    tonemapper,
]) => ({
    fileName: file,
    translation: [0, 0, 0],
    rotation: orientation,
    scale: file === 'fibers.bvp' ? [1, 1, 2] : [1, 1, 1],
    renderer: renderer.type,
    rendererSettings: renderer.settings,
    tonemapper: tonemapper.type,
    tonemapperSettings: tonemapper.settings,
    cameraSettings: file === 'fibers.bvp' ? cameras[1] : cameras[0],
    frameTime: renderer.type === 'mcm' ? 20 : 0.1,
    resolution: 1024,
    groups: file !== 'manix.bvp' ? groups : [],
    transferFunction: file === 'manix.bvp' ? transferFunction : [],
}));

console.log(JSON.stringify(tests, true, 2));
