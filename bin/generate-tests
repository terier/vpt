#!/usr/bin/env node

const fs = require('fs');

const fileNames = [
    'mitos.bvp.saf',
    'fibers.bvp.saf',
    'shards.bvp.saf',
    'manix.bvp.saf',
];

/*const rotations = new Array(10).fill(0).map(_ => [
    Math.acos(Math.random() * 2 - 1),
    Math.random() * Math.PI * 2,
    0,
]);*/

const rotations = [];
for (let i = 0; i < 5; i++) {
    rotations.push([
        Math.PI / 8,
        (i / 5) * Math.PI * 2,
        0,
    ]);
}
for (let i = 0; i < 5; i++) {
    rotations.push([
        -Math.PI / 8,
        ((i + 0.5) / 5) * Math.PI * 2,
        0,
    ]);
}

// throw away aligned frontal and back views
// do not change order, splice works in-place
rotations.splice(7, 1);
rotations.splice(0, 1);

const renderers = [
    /*{
        type: 'mip',
        settings: {
            steps: 1024,
        },
    },*/
    {
        type: 'iso',
        settings: {
            steps: 1024,
            isovalue: 0.5,
            light: [2, -3, -5],
        },
    },
    {
        type: 'eam',
        settings: {
            extinction: 256,
            slices: 1024,
        },
    },
    {
        type: 'dos',
        settings: {
            extinction: 256,
            slices: 2048,
            steps: 2048,
            aperture: 60,
            samples: 16,
        },
    },
    {
        type: 'mcm',
        settings: {
            extinction: 256,
            anisotropy: -0.5,
            steps: 128,
        },
    },
    {
        type: 'depth',
        settings: {
            extinction: 256,
            slices: 1024,
        },
    },
    {
        type: 'position',
        settings: {
            extinction: 256,
            slices: 1024,
        },
    },
];

const tonemappers = [
    {
        type: 'artistic',
        settings: {
            gamma: 2.2,
        },
    },
    {
        type: 'artistic',
        settings: {
            gamma: 1,
        },
    },
];

const cameras = [
    {
        near: 1,
        far: 5,
        fovy: 45 * Math.PI / 180,
        distance: 2,
    },
    {
        near: 1,
        far: 5,
        fovy: 45 * Math.PI / 180,
        distance: 3,
    },
];

function hex2rgb(str) {
    return [
        parseInt(str.substring(1, 3), 16) / 255,
        parseInt(str.substring(3, 5), 16) / 255,
        parseInt(str.substring(5, 7), 16) / 255,
    ];
}

const groups = [
    {
        color: [...hex2rgb('#38e4ff'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 0.2,
        }],
    },
    {
        color: [...hex2rgb('#53de31'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 0.4,
        }],
    },
    {
        color: [...hex2rgb('#f5cc43'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 0.6,
        }],
    },
    {
        color: [...hex2rgb('#de4f31'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 0.8,
        }],
    },
    {
        color: [...hex2rgb('#b542fc'), 1],
        density: 1,
        sharpness: 1,
        predicates: [{
            attribute: 'random',
            operation: '<=',
            value: 1,
        }],
    },
];

const transferFunction = JSON.parse(fs.readFileSync(process.argv[2], 'utf8'));

function cartesian(...lists) {
    if (lists.length === 0) {
        return [];
    } else if (lists.length === 1) {
        return lists[0];
    } else if (lists.length === 2) {
        return lists[0].flatMap(x => lists[1].map(y => [x, y]));
    } else {
        const recursive = cartesian(...lists.slice(1));
        return lists[0].flatMap(x => recursive.map(y => [x, ...y]));
    }
}

const tests = cartesian(
    fileNames,
    rotations,
    renderers,
).map(([
    fileName,
    rotation,
    renderer,
]) => {
    const camera = fileName === 'fibers.bvp.saf' ? cameras[1] : cameras[0];
    const tonemapper = (renderer.type === 'depth' || renderer.type === 'position') ? tonemappers[1] : tonemappers[0];
    const groupsCopy = JSON.parse(JSON.stringify(groups));
    for (const group of groupsCopy) {
        group.density = {
            'mitos.bvp.saf'  : 1,
            'fibers.bvp.saf' : 0.2,
            'shards.bvp.saf' : 0.1,
            'manix.bvp.saf'  : 1,
        }[fileName];
    }
    renderer.gradientStep = fileName === 'manix.bvp.saf' ? 0.001 : 0.005;
    return {
        fileName,
        fileType: fileName === 'manix.bvp.saf' ? 'normal' : 'conductor',
        translation: [0, 0, 0],
        rotation,
        scale: fileName === 'fibers.bvp.saf' ? [1, 2, 1] : [1, 1, 1],
        renderer,
        tonemapper,
        camera,
        frameTime: renderer.type === 'mcm' ? 80 : 0.5,
        resolution: 1024,
        groups: fileName !== 'manix.bvp.saf' ? groupsCopy : [],
        transferFunction: fileName === 'manix.bvp.saf' ? transferFunction : [],
    }
});

console.log(JSON.stringify(tests, true, 2));
